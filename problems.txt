//Given a binary array, find the maximum number of consecutive 1s in this array.

      var findMaxConsecutiveOnes = function(nums) {
          var current = 0;
          var max = 0;
          for (i in nums) {
              if (nums[i] === 1) {
                  current += 1;
                  if (current >= max) max = current;
              } else {
                  current = 0;
              }
          }

          return max;
      };

//------------------------------------------------------------------------------------------
//Given a binary tree, find its maximum depth.
//The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

      var maxDepth = function(root) {
          if (root === null) {
              return 0;
          }

          return Math.max(maxDepth(root.right), maxDepth(root.left)) + 1;
      };

//------------------------------------------------------------------------------------------
// There is a table World
//
// +-----------------+------------+------------+--------------+---------------+
// | name            | continent  | area       | population   | gdp           |
// +-----------------+------------+------------+--------------+---------------+
// | Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |
// | Albania         | Europe     | 28748      | 2831741      | 12960000      |
// | Algeria         | Africa     | 2381741    | 37100000     | 188681000     |
// | Andorra         | Europe     | 468        | 78115        | 3712000       |
// | Angola          | Africa     | 1246700    | 20609294     | 100990000     |
// +-----------------+------------+------------+--------------+---------------+
// A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.
//
// Write a SQL solution to output big countries' name, population and area.

      SELECT
          name, population, area
      FROM
          World
      WHERE
          population > 25000000 OR area > 3000000

------------------------------------------------------------------------------------------
Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

      var mergeTrees = function(t1, t2) {
          if (t1 && t2) {
              t1.val += t2.val;

              t1.left = mergeTrees(t1.left, t2.left);
              t1.right = mergeTrees(t1.right, t2.right);

          } else if (t1 == null){
              return t2;
          } else if (t2 == null) {
              return t1;
          }

          return t1;
      };

------------------------------------------------------------------------------------------
Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

      var arrayPairSum = function(nums) {
        nums.sort((a,b) => a-b );
        var sum = 0;
        for (i = 0; i < nums.length; i += 2) {
          sum += Math.min(nums[i], nums[i+1]);
        }

        return sum;
      };

------------------------------------------------------------------------------------------
Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.


      UPDATE salary
      SET
      sex = CASE sex
        WHEN 'm' THEN 'f'
        ELSE 'm'
      END;

------------------------------------------------------------------------------------------
Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

      var reverseWords = function(s) {
        s = s.split(" ");
        for (i in s) {
          s[i] = s[i].split("").reverse().join("");
        }

        return s.join(" ");
      };

------------------------------------------------------------------------------------------
X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.

      select
          *
      from
          cinema
      where
          id % 2 = 1 AND description != 'boring'
      ORDER BY
          rating DESC;

------------------------------------------------------------------------------------------
You're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.
The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

      var matrixReshape = function(nums, r, c) {
          var max = nums.length * nums[0].length;
          if (r * c > max) return nums;
          var reshaped = [];
          var bucket = [];

          for(i in nums) {
              for(j in nums[0]) {
                  if (bucket.length < c) {
                      bucket.push(nums[i][j]);
                  }

                  if (bucket.length === c) {
                      reshaped.push(bucket);
                      bucket = [];
                  }
              }
          }


          return reshaped;
      };

------------------------------------------------------------------------------------------
Given an array of integers, every element appears twice except for one. Find that single one.

      var singleNumber = function(nums) {
          let answer = new Object();
          for(let i = 0; i < nums.length; i++) {
              if (answer[nums[i]] === undefined) {
                  answer[nums[i]] = 1;
              } else {
                  answer[nums[i]] += 1;
              }
          }

          for(let i = 0; i < nums.length; i++) {
              if (answer[nums[i]] <= 1) {
                  return nums[i]
              }
          }
      };

------------------------------------------------------------------------------------------
      var getSum = function(a, b) {
          return a + b

      };

------------------------------------------------------------------------------------------
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

      var moveZeroes = function(nums) {
        for(let i = nums.length; i--;) {
          if (nums[i] == 0) {
              nums.splice(i, 1);
              nums.push(0)
          }
        }
      };
------------------------------------------------------------------------------------------
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

      var maxProfit = function(prices) {
        let total = 0
        for (let i = 1; i < prices.length; i++) {
          total += Math.max(0, prices[i] - prices[i - 1]);
        }

        return total;
      };

------------------------------------------------------------------------------------------
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

      var majorityElement = function(nums) {
        let limit = nums.length / 2;
        h = {};

        for(let i = 0; i < nums.length; i++) {
          if (h[nums[i]] === undefined) {
              h[nums[i]] = 1;
          } else {
              h[nums[i]] += 1;
          }

          if (h[nums[i]] > limit) { return nums[i]; }
        }
      };

------------------------------------------------------------------------------------------
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

      var firstUniqChar = function(s) {
        for(i=0;i<s.length;i++){
         if (s.indexOf(s[i])===s.lastIndexOf(s[i])){
            return i;
        }
        }
        return -1;
      };

------------------------------------------------------------------------------------------
Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.

Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node with value 3, the linked list should become 1 -> 2 -> 4 after calling your function.

      var deleteNode = function(node) {
          node.val = node.next.val;
          node.next = node.next.next;

      };

------------------------------------------------------------------------------------------
Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

      var isAnagram = function(s, t) {
          let h1 = {};
          let h2 = {};

          let i = 0;
          for (i = 0; i < s.length; i++) {
              if (h1[s[i]] === undefined) {
                  h1[s[i]] = 1;
              } else {
                  h1[s[i]] += 1;
              }
          }

          for (i = 0; i < t.length; i++) {
              if (h2[t[i]] === undefined) {
                  h2[t[i]] = 1;
              } else {
                  h2[t[i]] += 1;
              }
          }

          for (i = 0; i < t.length; i++) {
              if (h1[t[i]] === undefined ) {
                  return false;
              }
              if (h1[t[i]] !== h2[t[i]]) {
                  return false;
              }
          }

          for (i=0; i< s.length; i++) {
              if (h2[s[i]] === undefined) {
                  return false;
              }
              if (h1[s[i]] !== h2[s[i]]) {
                  return false;
              }
          }

          return true;
      };


------------------------------------------------------------------------------------------
Reverse a singly linked list.

      var reverseList = function reverseList(head) {
          var prev = null;
          while (head) {
              var next = head.next;
              head.next = prev;
              prev = head;
              head = next;
          }
          return prev;
      }

------------------------------------------------------------------------------------------
Given an integer, write a function to determine if it is a power of three.

      var isPowerOfThree = function(n) {
          if (n <= 2 && n != 1) {
              return false;
          }
          while (n > 1) {
              n /= 3;
              if (n > 1 && n < 3){
                  return false;
              }
          }
          return true;
      };

------------------------------------------------------------------------------------------
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

      var searchInsert = function(nums, target) {
          for (i = 0; i < nums.length; i++) {
              if (target === nums[i]) return i;
              if (target < nums[i]) {
                  if (i === 0 && target < nums[0]) return 0;

              }

              if (target > nums[i] && i === nums.length - 1) return i + 1;
              if (target > nums[i] && target < nums[i + 1]) return i + 1;
          }
      };

------------------------------------------------------------------------------------------
Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).

For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.

      var hammingWeight = function(n) {
          let bin = [];
          while (n > 0) {
              bin.push(n % 2);
              n = Math.floor(n/2);
          }

          let count = 0;
          bin.forEach(el => {
              if (el === 1) {
                  count += 1;
              }
          });

          return count;
      };

------------------------------------------------------------------------------------------
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

    var maxSubArray = function(nums) {
        let max = nums[0];
        let currentSum = 0;
        nums.forEach(el => {
            currentSum += el;
            max = Math.max(max, currentSum);
            if (currentSum < 0) {
                currentSum = 0;
            }
        })
        return max;
    };

------------------------------------------------------------------------------------------
Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

      var removeElement = function(nums, val) {
          var i = 0;
          for (var j = 0; j < nums.length; j++) {
              if (nums[j] != val) {
                  nums[i] = nums[j];
                  i++;
              }
          }
          return i;
      };

------------------------------------------------------------------------------------------
Given an array of strings, group anagrams together.

For example, given: ["eat", "tea", "tan", "ate", "nat", "bat"],
Return:

[
  ["ate", "eat","tea"],
  ["nat","tan"],
  ["bat"]
]

      var groupAnagrams = function(strs) {
          var ret = [];
          var hashmap = {};

          for (var i = 0; i < strs.length; i++) {
              var arr = strs[i].split('');
              if (arr.sort() in hashmap) {
                  hashmap[arr.sort()].push(strs[i]);
              } else {
                  hashmap[arr.sort()] = [strs[i]];
              }
          }

          for (var j in hashmap) {
              ret.push(hashmap[j]);
          }
          return ret;
      }

------------------------------------------------------------------------------------------
Determine whether an integer is a palindrome. Do this without extra space.

var isPalindrome = function(x) {
    if (x.toString()[0] === "-") return false;
    return (x.toString().split("").reverse().join("") === x.toString()) ? true : false;
};

------------------------------------------------------------------------------------------
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,
Given input array nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.

      var removeDuplicates = function(nums) {
          // if (nums.length <= 1) {return nums.length;}
          // var count = 1;
          // for (i = 0; i < nums.length - 1; i++) {
          //     if (nums[i] != nums[i+1]) {
          //         count++;
          //     }
          // }
          // return count;

              if (nums.length == 0) return 0;
          var i = 0;
          for (var j = 1; j < nums.length; j++) {
              if (nums[j] != nums[i]) {
                  i++;
                  nums[i] = nums[j];
              }
          }
          console.log(nums);
          return i + 1;
      };
------------------------------------------------------------------------------------------
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

var isValid = function(s) {
    var stack = [];
    var dic = {')':'(', '}':'{', ']':'['};
    for (let i = 0; i < s.length; i++) {
        if (')]}'.includes(s[i]) && dic[s[i]] != stack[stack.length - 1]) return false;
        if (stack.length === 0 && ')}]'.includes(s[i])) return false;
        if ('({['.includes(s[i])) {
            stack.push(s[i]);
        } else {
            if (dic[s[i]] === stack[stack.length - 1]) stack.pop();
        }
    }

    return stack.length === 0 ? true : false;
};
------------------------------------------------------------------------------------------
Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.

If the last word does not exist, return 0.

var lengthOfLastWord = function(s) {
    if (s.length === 0) return 0;
    var count = 0;
    var flag = false;
    for (i = s.length - 1; i >= 0; i-- ) {
        if (flag && s[i] === ' ') {
            return count;
        } else if (!flag && s[i] != ' ') {
            flag = !flag;
            count += 1;
        } else if (flag && s[i] != ' ') {
            count += 1;
        }
    }

    return count;
};
------------------------------------------------------------------------------------------
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

var addTwoNumbers = function(l1, l2) {
    let sum = 0;
    let carry = 0;
    let list = new ListNode(0);
    let head = list;

    while ((l1!==null) || (l2!==null) || sum > 0) {
        if(l1!==null){
            sum = sum + l1.val;
            l1 = l1.next;
        }
        if(l2!==null){
            sum = sum + l2.val;
            l2 = l2.next;
        }
        if(sum>=10){
            carry = 1;
            sum = sum - 10;
        }

        head.next = new ListNode(sum);
        head = head.next;

        sum = carry;
        carry = 0;
    }

    return list.next;
};
Rotate an array of n elements to the right by k steps.

For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].

var rotate = function(nums, k) {
    let sub;
    for (let i = nums.length - 1; i > nums.length - 1 - k; i--) {
        sub = nums.pop();
        nums.unshift(sub);
    }
};
------------------------------------------------------------------------------------------
Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

var lengthOfLongestSubstring = function(s) {
    var longest = '';
    var current = '';
    for(let i = 0; i < s.length; i++) {
        current = '';
        for(let j = i; j < s.length; j++) {
            if (current.includes(s[j])) {
                break;
            }
            current += s[j];
            if (current.length >= longest.length) {
               longest = current;
            }
        }
    }

    return longest.length;
};
------------------------------------------------------------------------------------------
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

var findMedianSortedArrays = function(nums1, nums2) {
    var arr = nums1.concat(nums2);
    arr.sort((a,b) => {
          console.log( "comparing " + a + ",  " + b );

        return a - b;
    });
    console.log(arr)
    if (arr.length % 2 !== 0) {
        return arr[Math.floor(arr.length/2)];
    } else {
        return (arr[arr.length/2] + arr[(arr.length/2) - 1]) / 2;
    }
};
------------------------------------------------------------------------------------------
Implement a function likes :: [String] -> String, which must take in input array, containing the names of people who like an item. It must return the display text as shown in the examples:

likes [] // must be "no one likes this"
likes ["Peter"] // must be "Peter likes this"
likes ["Jacob", "Alex"] // must be "Jacob and Alex like this"

def likes(names)
  string = ""
  if names == []
     return "no one likes this"
  elsif names.length == 1
     return "#{names[0]} likes this"
  elsif names.length == 2
     return "#{names[0]} and #{names[1]} like this"
  elsif names.length == 3
     names.each_with_index do |name,i|
       if i != names.length - 1 && i != names.length - 2
         string << "#{name}, "
       elsif i != names.length - 1
         string << "#{name} and "
       else
         string << "#{name} like this"
       end
     end
   elsif names.length > 3
     count = 0
     names.each_with_index do |name,i|
       if i == 0
       string << "#{name}, "
       elsif i == 1
       string << "#{name} "
       elsif i > 1 && count != 1
       string << "and #{names.length - 2} others like this"
       count = 1
       end
     end
   end
   string
end

------------------------------------------------------------------------------------------
Return the number (count) of vowels in the given string.

def getCount(inputStr)
  vowels = ['a','e','i','o','u']
  count = 0

  inputStr.each_char do |c|
   count += 1 if vowels.include?(c)
   end
   count
end

------------------------------------------------------------------------------------------
Given an n x n array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.

array = [[1,2,3],
         [4,5,6],
         [7,8,9]]
snail(array) #=> [1,2,3,6,9,8,7,4,5]

def snail(array)
  return array if array.length == 0
  return array[0] if array.length == 1

  answer = array[0]
  x,y = array[0].length - 1, 0
  step = array[0].length - 1
  direction = 1
  reset_two = 0


  while answer.length < array[1].length * array.length

    if direction == 1
      step -= 1 if reset_two == 2
      reset_two = 0 if reset_two == 2

      step.times do
        y += 1
        answer << array[y][x]
      end
      reset_two += 1
      direction = 2

    elsif direction == 2
      step -= 1 if reset_two == 2
      reset_two = 0 if reset_two == 2

      step.times do
        x -= 1
        answer << array[y][x]
      end
      reset_two += 1
      direction = 3

    elsif direction == 3
      step -= 1 if reset_two == 2
      reset_two = 0 if reset_two == 2

      step.times do
        y -= 1
        answer << array[y][x]
      end
      reset_two += 1
      direction = 4

    elsif direction == 4
      step -= 1 if reset_two == 2
      reset_two = 0 if reset_two == 2

      step.times do
        x += 1
        answer << array[y][x]
      end
      reset_two += 1
      direction = 1
     end

  end

  answer
end

------------------------------------------------------------------------------------------
convert a string to a new string where each character in the new string is '(' if that character appears only once in the original string, or ')' if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.

Examples:

"din" => "((("

"recede" => "()()()"

def duplicate_encode(word)
  answer = ""

  word.downcase.each_char do |c|
    if word.downcase.count(c) > 1
      answer << ")"
    else
      answer << "("
    end
  end
  answer
end
------------------------------------------------------------------------------------------
The function will take n (with: n>= 0) as parameter and will return the sum of the squares of the binomial coefficients on line n.

##Examples:
easyline(0) => 1
easyline(1) => 2
easyline(4) => 70
easyline(50) => 100891344545564193334812497256

def easyline(n)
    pascal = [[1],[1,1]]
    return 1 if n == 0
    return 2 if n == 1

    while pascal.length < n + 1
      bucket = []

      for i in 0..pascal[-1].length - 2
        bucket << pascal[-1][i] + pascal[-1][i+1]
      end

        bucket.unshift(1)
        bucket.push(1)
        pascal << bucket
    end

    pascal[-1].inject {|sum, number| sum += number**2}
end
------------------------------------------------------------------------------------------
Only worry about the following format:
(123) 456-7890 (don't forget the space after the close parentheses)

Examples:
validPhoneNumber("(123) 456-7890")  =>  returns true
validPhoneNumber("(1111)555 2345")  => returns false
validPhoneNumber("(098) 123 4567")  => returns false

def validPhoneNumber(phoneNumber)
  return false if phoneNumber[5] != " "
  return false if phoneNumber[-5] != "-"
  true
end
------------------------------------------------------------------------------------------
Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number.

def createPhoneNumber(numbers)
  return "(#{numbers[0]}#{numbers[1]}#{numbers[2]}) #{numbers[3]}#{numbers[4]}#{numbers[5]}-#{numbers[6]}#{numbers[7]}#{numbers[8]}#{numbers[9]}"
end

------------------------------------------------------------------------------------------
Write a function that will return the count of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. The input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.

Example
"abcde" -> 0 # no characters repeats more than once
"aabbcde" -> 2 # 'a' and 'b'

def duplicate_count(text)
    hash = Hash.new(0)
    text = text.downcase
     text.each_char {|c| hash[c] += 1}
     hash.values.count {|v| v>1}
end
------------------------------------------------------------------------------------------
A digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has two digits, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.

Example
digital_root(942)
=> 9 + 4 + 2
=> 15 ...
=> 1 + 5
=> 6

def digital_root(n)
  length = n.to_s.length
  sum = 0
  number = n.to_s
  while length > 1
    number.each_char do |n|
      sum += n.to_i
    end
    length = sum.to_s.length
    number = sum.to_s
    sum = 0

  end
   number.to_i
end
------------------------------------------------------------------------------------------
Ask a small girl - "How old are you?". She always says strange things... Lets help her!
For correct answer program should return int from 0 to 9.

def get_age(age) age[0].to_i end
------------------------------------------------------------------------------------------
Sum of numbers from 1-n
def f(n)
  return false if n.nil?
  return false if n.to_s.include?(".")
  return false if n.is_a? String
  return false if n == 0
  return false if n < 0

  (1..n).reduce {|sum, i| sum += i}
end
------------------------------------------------------------------------------------------
A Narcissistic Number is a number which is the sum of its own digits, each raised to the power of the number of digits.

For example, take 153 (3 digits):
    1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153

def narcissistic?( value )
  value = value.to_s
  sum = 0
  value.each_char do |n|
    sum += n.to_i** value.length
  end
  if sum == value.to_i
    return true
  else
    return false
  end
end
------------------------------------------------------------------------------------------
Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 integers. No floats or empty arrays will be passed.

def sum_two_smallest_numbers(numbers)
  numbers.sort[0..1].inject(:+)
end
------------------------------------------------------------------------------------------
Think of a Quadribonacci starting with a signature of 4 elements and each following element is the sum of the 4 previous, a Pentabonacci (well Cinquebonacci would probably sound a bit more italian, but it would also sound really awful) with a signature of 5 elements and each following element is the sum of the 5 previous, and so on.
Example
xbonacci {1,1,1,1} 10 = {1,1,1,1,4,7,13,25,49,94}
xbonacci {0,0,0,0,1} 10 = {0,0,0,0,1,1,2,4,8,16}

def Xbonacci(s,n)
  len = s.length
  s.push(s[-len..-1].inject(:+)) while s.length < n
  return s[0...n]
end
------------------------------------------------------------------------------------------
Summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won't get to hear non-native Italian speakers trying to pronounce it :(

So, if we are to start our Tribonacci sequence with [1,1,1] as a starting input (AKA signature), we have this sequence:

{1,1,1,3,5,9,17,31,...}

def tribonacci(signature,n)
  return [signature[-1]] if n == 1
  return [] if n == 0
  while signature.length < n
  signature << signature[-1] + signature[-2] + signature[-3]
  end
  signature
end
------------------------------------------------------------------------------------------
For every positive integer N, there exists a unique sequence starting with 1 and ending with N and such that every number in the sequence is either the double of the preceeding number or the double plus 1.

For example, given N = 13, the sequence is [1, 3, 6, 13], because . . . :

 3 =  2*1 +1
 6 =  2*3
 13 = 2*6 +1

def climb(n)
  answer = [n]

  while answer[0] > 1
      answer.unshift(answer[0]/2)
  end

  answer
end
------------------------------------------------------------------------------------------
Sum all the numbers of the array (in F# and Haskell you get a list) except the highest and the lowest element (the value, not the index!).
(The highest/lowest element is respectively only one element at each edge, even if there are more than one with the same value!)

Example:

{ 6, 2, 1, 8, 10 } => 16
{ 1, 1, 11, 2, 3 } => 6

def sum_array(arr)
  if arr == nil || arr == [] || arr.length == 1 || arr.length == 2
    return 0
  else
    return arr.sort[1..-2].inject(:+)
  end
end
------------------------------------------------------------------------------------------
Write a method, that gets an array of integer-numbers and return an array of the averages of each integer-number and his follower, if there is one.

Example:
Input:  [ 1, 3, 5, 1, -10]
Output:  [ 2, 4, 3, -4.5]

def averages(arr)
  answer = []
  return answer if arr == []
  return answer if arr == nil

  for idx in 0...arr.length - 1
    answer << (arr[idx] + arr[idx+1]).to_f/2
  end

  answer
end
------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------
