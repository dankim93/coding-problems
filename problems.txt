//Given a binary array, find the maximum number of consecutive 1s in this array.

      var findMaxConsecutiveOnes = function(nums) {
          var current = 0;
          var max = 0;
          for (i in nums) {
              if (nums[i] === 1) {
                  current += 1;
                  if (current >= max) max = current;
              } else {
                  current = 0;
              }
          }

          return max;
      };

//------------------------------------------------------------------------------------------
//Given a binary tree, find its maximum depth.
//The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

      var maxDepth = function(root) {
          if (root === null) {
              return 0;
          }

          return Math.max(maxDepth(root.right), maxDepth(root.left)) + 1;
      };

//------------------------------------------------------------------------------------------
// There is a table World
//
// +-----------------+------------+------------+--------------+---------------+
// | name            | continent  | area       | population   | gdp           |
// +-----------------+------------+------------+--------------+---------------+
// | Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |
// | Albania         | Europe     | 28748      | 2831741      | 12960000      |
// | Algeria         | Africa     | 2381741    | 37100000     | 188681000     |
// | Andorra         | Europe     | 468        | 78115        | 3712000       |
// | Angola          | Africa     | 1246700    | 20609294     | 100990000     |
// +-----------------+------------+------------+--------------+---------------+
// A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.
//
// Write a SQL solution to output big countries' name, population and area.

      SELECT
          name, population, area
      FROM
          World
      WHERE
          population > 25000000 OR area > 3000000

------------------------------------------------------------------------------------------
Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

      var mergeTrees = function(t1, t2) {
          if (t1 && t2) {
              t1.val += t2.val;

              t1.left = mergeTrees(t1.left, t2.left);
              t1.right = mergeTrees(t1.right, t2.right);

          } else if (t1 == null){
              return t2;
          } else if (t2 == null) {
              return t1;
          }

          return t1;
      };

------------------------------------------------------------------------------------------
Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

      var arrayPairSum = function(nums) {
        nums.sort((a,b) => a-b );
        var sum = 0;
        for (i = 0; i < nums.length; i += 2) {
          sum += Math.min(nums[i], nums[i+1]);
        }

        return sum;
      };

------------------------------------------------------------------------------------------
Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.


      UPDATE salary
      SET
      sex = CASE sex
        WHEN 'm' THEN 'f'
        ELSE 'm'
      END;

------------------------------------------------------------------------------------------
Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

      var reverseWords = function(s) {
        s = s.split(" ");
        for (i in s) {
          s[i] = s[i].split("").reverse().join("");
        }

        return s.join(" ");
      };

------------------------------------------------------------------------------------------
X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.

      select
          *
      from
          cinema
      where
          id % 2 = 1 AND description != 'boring'
      ORDER BY
          rating DESC;

------------------------------------------------------------------------------------------
You're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.
The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

      var matrixReshape = function(nums, r, c) {
          var max = nums.length * nums[0].length;
          if (r * c > max) return nums;
          var reshaped = [];
          var bucket = [];

          for(i in nums) {
              for(j in nums[0]) {
                  if (bucket.length < c) {
                      bucket.push(nums[i][j]);
                  }

                  if (bucket.length === c) {
                      reshaped.push(bucket);
                      bucket = [];
                  }
              }
          }


          return reshaped;
      };

------------------------------------------------------------------------------------------
Given an array of integers, every element appears twice except for one. Find that single one.

      var singleNumber = function(nums) {
          let answer = new Object();
          for(let i = 0; i < nums.length; i++) {
              if (answer[nums[i]] === undefined) {
                  answer[nums[i]] = 1;
              } else {
                  answer[nums[i]] += 1;
              }
          }

          for(let i = 0; i < nums.length; i++) {
              if (answer[nums[i]] <= 1) {
                  return nums[i]
              }
          }
      };

------------------------------------------------------------------------------------------
      var getSum = function(a, b) {
          return a + b

      };

------------------------------------------------------------------------------------------
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

      var moveZeroes = function(nums) {
        for(let i = nums.length; i--;) {
          if (nums[i] == 0) {
              nums.splice(i, 1);
              nums.push(0)
          }
        }
      };
------------------------------------------------------------------------------------------
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

      var maxProfit = function(prices) {
        let total = 0
        for (let i = 1; i < prices.length; i++) {
          total += Math.max(0, prices[i] - prices[i - 1]);
        }

        return total;
      };

------------------------------------------------------------------------------------------
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

      var majorityElement = function(nums) {
        let limit = nums.length / 2;
        h = {};

        for(let i = 0; i < nums.length; i++) {
          if (h[nums[i]] === undefined) {
              h[nums[i]] = 1;
          } else {
              h[nums[i]] += 1;
          }

          if (h[nums[i]] > limit) { return nums[i]; }
        }
      };

------------------------------------------------------------------------------------------
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

      var firstUniqChar = function(s) {
        for(i=0;i<s.length;i++){
         if (s.indexOf(s[i])===s.lastIndexOf(s[i])){
            return i;
        }
        }
        return -1;
      };

------------------------------------------------------------------------------------------
Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.

Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node with value 3, the linked list should become 1 -> 2 -> 4 after calling your function.

      var deleteNode = function(node) {
          node.val = node.next.val;
          node.next = node.next.next;

      };

------------------------------------------------------------------------------------------
Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

      var isAnagram = function(s, t) {
          let h1 = {};
          let h2 = {};

          let i = 0;
          for (i = 0; i < s.length; i++) {
              if (h1[s[i]] === undefined) {
                  h1[s[i]] = 1;
              } else {
                  h1[s[i]] += 1;
              }
          }

          for (i = 0; i < t.length; i++) {
              if (h2[t[i]] === undefined) {
                  h2[t[i]] = 1;
              } else {
                  h2[t[i]] += 1;
              }
          }

          for (i = 0; i < t.length; i++) {
              if (h1[t[i]] === undefined ) {
                  return false;
              }
              if (h1[t[i]] !== h2[t[i]]) {
                  return false;
              }
          }

          for (i=0; i< s.length; i++) {
              if (h2[s[i]] === undefined) {
                  return false;
              }
              if (h1[s[i]] !== h2[s[i]]) {
                  return false;
              }
          }

          return true;
      };


------------------------------------------------------------------------------------------
Reverse a singly linked list.

      var reverseList = function reverseList(head) {
          var prev = null;
          while (head) {
              var next = head.next;
              head.next = prev;
              prev = head;
              head = next;
          }
          return prev;
      }

------------------------------------------------------------------------------------------
Given an integer, write a function to determine if it is a power of three.

      var isPowerOfThree = function(n) {
          if (n <= 2 && n != 1) {
              return false;
          }
          while (n > 1) {
              n /= 3;
              if (n > 1 && n < 3){
                  return false;
              }
          }
          return true;
      };

------------------------------------------------------------------------------------------
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

      var searchInsert = function(nums, target) {
          for (i = 0; i < nums.length; i++) {
              if (target === nums[i]) return i;
              if (target < nums[i]) {
                  if (i === 0 && target < nums[0]) return 0;

              }

              if (target > nums[i] && i === nums.length - 1) return i + 1;
              if (target > nums[i] && target < nums[i + 1]) return i + 1;
          }
      };

------------------------------------------------------------------------------------------
Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).

For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.

      var hammingWeight = function(n) {
          let bin = [];
          while (n > 0) {
              bin.push(n % 2);
              n = Math.floor(n/2);
          }

          let count = 0;
          bin.forEach(el => {
              if (el === 1) {
                  count += 1;
              }
          });

          return count;
      };

------------------------------------------------------------------------------------------
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

    var maxSubArray = function(nums) {
        let max = nums[0];
        let currentSum = 0;
        nums.forEach(el => {
            currentSum += el;
            max = Math.max(max, currentSum);
            if (currentSum < 0) {
                currentSum = 0;
            }
        })
        return max;
    };

------------------------------------------------------------------------------------------
Given an array and a value, remove all instances of that value in place and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

      var removeElement = function(nums, val) {
          var i = 0;
          for (var j = 0; j < nums.length; j++) {
              if (nums[j] != val) {
                  nums[i] = nums[j];
                  i++;
              }
          }
          return i;
      };

------------------------------------------------------------------------------------------
Given an array of strings, group anagrams together.

For example, given: ["eat", "tea", "tan", "ate", "nat", "bat"],
Return:

[
  ["ate", "eat","tea"],
  ["nat","tan"],
  ["bat"]
]

      var groupAnagrams = function(strs) {
          var ret = [];
          var hashmap = {};

          for (var i = 0; i < strs.length; i++) {
              var arr = strs[i].split('');
              if (arr.sort() in hashmap) {
                  hashmap[arr.sort()].push(strs[i]);
              } else {
                  hashmap[arr.sort()] = [strs[i]];
              }
          }

          for (var j in hashmap) {
              ret.push(hashmap[j]);
          }
          return ret;
      }

------------------------------------------------------------------------------------------
Determine whether an integer is a palindrome. Do this without extra space.

var isPalindrome = function(x) {
    if (x.toString()[0] === "-") return false;
    return (x.toString().split("").reverse().join("") === x.toString()) ? true : false;
};

------------------------------------------------------------------------------------------
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,
Given input array nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.

      var removeDuplicates = function(nums) {
          // if (nums.length <= 1) {return nums.length;}
          // var count = 1;
          // for (i = 0; i < nums.length - 1; i++) {
          //     if (nums[i] != nums[i+1]) {
          //         count++;
          //     }
          // }
          // return count;

              if (nums.length == 0) return 0;
          var i = 0;
          for (var j = 1; j < nums.length; j++) {
              if (nums[j] != nums[i]) {
                  i++;
                  nums[i] = nums[j];
              }
          }
          console.log(nums);
          return i + 1;
      };
------------------------------------------------------------------------------------------
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

var isValid = function(s) {
    var stack = [];
    var dic = {')':'(', '}':'{', ']':'['};
    for (let i = 0; i < s.length; i++) {
        if (')]}'.includes(s[i]) && dic[s[i]] != stack[stack.length - 1]) return false;
        if (stack.length === 0 && ')}]'.includes(s[i])) return false;
        if ('({['.includes(s[i])) {
            stack.push(s[i]);
        } else {
            if (dic[s[i]] === stack[stack.length - 1]) stack.pop();
        }
    }

    return stack.length === 0 ? true : false;
};
------------------------------------------------------------------------------------------
Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.

If the last word does not exist, return 0.

var lengthOfLastWord = function(s) {
    if (s.length === 0) return 0;
    var count = 0;
    var flag = false;
    for (i = s.length - 1; i >= 0; i-- ) {
        if (flag && s[i] === ' ') {
            return count;
        } else if (!flag && s[i] != ' ') {
            flag = !flag;
            count += 1;
        } else if (flag && s[i] != ' ') {
            count += 1;
        }
    }

    return count;
};
------------------------------------------------------------------------------------------
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

var addTwoNumbers = function(l1, l2) {
    let sum = 0;
    let carry = 0;
    let list = new ListNode(0);
    let head = list;

    while ((l1!==null) || (l2!==null) || sum > 0) {
        if(l1!==null){
            sum = sum + l1.val;
            l1 = l1.next;
        }
        if(l2!==null){
            sum = sum + l2.val;
            l2 = l2.next;
        }
        if(sum>=10){
            carry = 1;
            sum = sum - 10;
        }

        head.next = new ListNode(sum);
        head = head.next;

        sum = carry;
        carry = 0;
    }

    return list.next;
};
